/**
 * 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
示例 1:
给定数组 nums = [1,1,2], 

函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 

你不需要考虑数组中超出新长度后面的元素。
示例 2:
给定 nums = [0,0,1,1,1,2,2,3,3,4],

函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。

你不需要考虑数组中超出新长度后面的元素。
说明:
为什么返回数值是整数，但输出的答案是数组呢?
请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
你可以想象内部操作如下:
// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
int len = removeDuplicates(nums);

// 在函数里修改输入数组对于调用者是可见的。
// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
for (int i = 0; i < len; i++) {
    print(nums[i]);
}
 * 
 */
/**
 * @param {number[]} nums
 * @return {number}
 */
var arr =[1,1,2];
 var removeDuplicates = function(nums) {
    if (nums.length<=1) {
        return nums.length;
    }
    var p =0;//记录不重复数组元素的个数
    for(var i=p+1 ; i<nums.length ; i++){
        if (nums[p]==nums[i]) {
            continue;
        }
        else{
            p++;
            nums[p]=nums[i];
        }
    }
    return p+1;
};
console.log(removeDuplicates(arr));
/**
 * 用两个元素作为指针来记录数组的序号，p，i
 * 从数组的第一个元素nums[0]开始，此时p=0，i=1；
 * 判断nums[p]==nums[i]是否为true，
 * 若为true，则说明这俩元素重复，继续循环，i++，
 * 直到找到与nums[p]不相等的数组元素，
 * p++，nums[p]=nums[i]，用下一个数组地址来存储不同的元素，
 * 一直到循环结束的时候，则p+1就是数组中不相同的元素的个数，
 * 而且前面p+1个元素已经修改为不重复的有序数列
 */